//.......................................................tabs...................................................
const tabs = document.querySelectorAll('[data-tab-target]')
const tabContents = document.querySelectorAll('[data-tab-content]')

tabs.forEach(tab => {
  tab.addEventListener('click', () => {
    const targetTab = document.querySelector(tab.dataset.tabTarget)
    tabContents.forEach(tabContent => {
      tabContent.classList.remove('active')
    })
    tabs.forEach(tab => {
      tab.classList.remove('active')
    })
    tab.classList.add('active')
    targetTab.classList.add('active')
  })
})


// ...................................settings....................................
//deck of all the cards

const deckOfCards2 = [
  'card1',
  'card2',
  'card3',
  'card4',
  'card5',
  'card6',
  'card7',
  'card8',
  'card9',
  'card10',
  'card11',
  'card12',
  'card13',
  'card14',
  'card15',
  'card16',
  'card17',
  'card18',
  'card19',
  'card20',
  'card21',
  'card22',
  'card23',
  'card24',
]
const deckOfCards = [
  'card1',
  'card2',
  'card3',
  'card4',
  'card5',
  'card6',
  'card7',
  'card8',
  'card9',
  'card10',
  'card11',
  'card12',
  'card13',
  'card14',
  'card15',
  'card16',
  'card17',
  'card18',
  'card19',
  'card20',
  'card21',
  'card22',
  'card23',
  'card24',
]

let gameBoard = []
const memoryCards = document.querySelectorAll(".inner")

// default setting
window.addEventListener('DOMContentLoaded', () => {
  const deck = document.querySelectorAll(".card")
  for (let i = 0, tempnames = deckOfCards; i < 24; i++) {
    let rnd = Math.floor(Math.random() * tempnames.length);
    let pair = (tempnames[rnd])
    tempnames.splice(rnd, 1);
    gameBoard.push(pair, pair)
    gameBoard.sort(() => Math.random() - Math.random()).slice(0, tempnames.length)
    deck.className = "card card-hidden"
  }


  for (let i = 0; i < deck.length; i++) {
    setTimeout(() => {
      deck[i].className += ` ${gameBoard[i]}`
      deck[i].setAttribute('data-card', gameBoard[i])
    }, 500);
  }
  console.log("loaded")
});

let points = 0
let wrongClicks = 0


//save settings - local storage and session storage
const levels = document.getElementById("num_cards")
const saveBtn = document.getElementById("save_settings"); //saveBtn as varibales
const deck = document.querySelectorAll(".card")

let mode = null


saveBtn.addEventListener("click", () => { //listen for when saveBtn is pressed
  const playerName = document.getElementById("player_name");
  const Name = playerName.value
  let highscore = Math.floor((points / wrongClicks) * 100);
  let level = levels.selectedIndex

  sessionStorage.setItem("user", Name)
  sessionStorage.setItem("score", JSON.stringify(highscore))

  document.getElementById("player").innerHTML = Name



  for (const obj of deckOfCards2) {
    deckOfCards.push(obj);
  }

  // store number of cards to session storage
  if (level == 0) {
    document.querySelectorAll(".row6, .row5, .row4, .row3, .row2, .row1").forEach(element => element.classList.remove("hideRow"))
    gameBoard.length = null
    mode = 24
    points = 0
    wrongClicks = 0
    setTimeout(() => {}, 200);
  } else if (level == 1) {
    document.querySelectorAll(".row6").forEach(element => element.classList.add("hideRow"))
    gameBoard.length = null
    mode = 20
    points = 0
    wrongClicks = 0
  } else if (level == 2) {
    document.querySelectorAll(".row6, .row5").forEach(element => element.classList.add("hideRow"))
    gameBoard.length = null
    mode = 16
    points = 0
    wrongClicks = 0
  } else if (level == 3) {
    document.querySelectorAll(".row6, .row5, .row4").forEach(element => element.classList.add("hideRow"))
    gameBoard.length = null
    mode = 12
    points = 0
    wrongClicks = 0
  } else if (level == 4) {
    document.querySelectorAll(".row6, .row5, .row4, .row3").forEach(element => element.classList.add("hideRow"))
    gameBoard.length = null
    mode = 8
    points = 0
    wrongClicks = 0
  } else if (level == 5) {
    document.querySelectorAll(".row6, .row5, .row4, .row3, .row2").forEach(element => element.classList.add("hideRow"))
    gameBoard.length = null
    mode = 4
    points = 0
    wrongClicks = 0

  }

  //block code to randomize cards and push to the game board with a specific amouts of card without duplicates
  const setup = () => {
    for (let i = 0, tempnames = deckOfCards; i < mode; i++) {
      let rnd = Math.floor(Math.random() * tempnames.length);
      let pair = (tempnames[rnd])
      tempnames.splice(rnd, 1);
      gameBoard.push(pair, pair)
      gameBoard.sort(() => Math.random() - Math.random()).slice(0, tempnames.length)
    }
  }

  if (gameBoard == null) { //if gameBoard is empty 
    setup()
  } else if (gameBoard != null) { //if gameboard is not empty
    setTimeout(() => {
      gameBoard.length = 0
    }, 100);
    setup()
  }




  for (let i = 0; i < deck.length; i++) {
    deck[i].className = ` card card-hidden ${gameBoard[i]}`
    deck[i].setAttribute('data-card', gameBoard[i])
  }
  console.log(mode)
  
  
});

let primaryCard = null;



// ...................................Card games....................................


//loop through mock array/deck, add an event listener that detects when a card in the deck is click
for (i = 0; i < deck.length; i++) {
  deck[i].addEventListener("click", cardClick) //fucntion removes the BG of anycard that is clicked
}

console.log(points)
// function- to remove the background image(back of the card) by removing the class "card-hidden"
function cardClick(e) {
  target = e.currentTarget
  e.target.classList.remove("card-hidden")

  //conditional statements
  //if we haven't a click card, keep track of card and display the front
  if (!primaryCard) {
    primaryCard = target //assign the the card the user click to the primary card varible
    console.log(target)
    primaryCard.classList.add("done") //remove pointer of selected card
  }
  //a new set if condition if the first one is false
  else if (primaryCard) {
    //if we have click a card check if the the new card match the primaryCard

    if (primaryCard.getAttribute("data-card") == target.getAttribute('data-card')) {
      e.preventDefault();
      console.log("match")
      points++
      document.getElementById("high_score").innerHTML = points;
      target.classList.add("done") //remove pointer if the cards matches
      primaryCard = null //reset the the value of primary card back to null if it matches with

      if (points == mode) {
        alert("you won")
        document.getElementById("high_score").innerHTML = sessionStorage.getItem("highscore")
      }

      console.log(points)
      console.log(mode)
    } else if (primaryCard.getAttribute("data-card") != target.getAttribute('data-card')) {
      console.log("not equal")
      setTimeout(() => {
        wrongClicks++
        e.preventDefault();
        primaryCard.classList.remove("done")
        primaryCard.classList.add("card-hidden")
        target.classList.add("card-hidden")
        primaryCard = null
      }, 400);
    } else {
      e.preventDefault();
      primaryCard = null
      primaryCard.classList.remove("done")
      primaryCard.classList.add("card-hidden")
    }
  }
};